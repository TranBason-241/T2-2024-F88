$(document).ready(function () {
  // Lấy đường link hiện tại
  var currentUrl = window.location.href;

  //sheet
  //https://docs.google.com/spreadsheets/d/1NhY9MOMq4ImWK2Ixs7NTO6kZTfyRyCpTihWocJ6lQOU/edit#gid=0

  // Get data question from parameter

  getDataFormParam = () => {
    const urlParams = new URLSearchParams(window.location.hash.substring(1));
    const ans = urlParams.get("ans");

    if (ans) {
      questionDirec = document.querySelectorAll('input[type="radio"][name="q-1"]');
      questionDirec[ans - 1].checked = true;
    }
  };
  getDataFormParam();

  // shareSocial
  shareSocial(currentUrl);

  // get province

  async function fetchAsync(url) {
    let response = await fetch(url);
    let data = await response.json();
    return data;
  }

  provinces = [
    { name: "Hà Nội" },
    { name: "Hồ Chí Minh" },
    { name: "Cần Thơ" },
    { name: "Đà Nẵng" },
    { name: "Hải Phòng" },
    { name: "An Giang" },
    { name: "Bà Rịa-Vũng Tàu" },
    { name: "Bắc Giang" },
    { name: "Bắc Kạn" },
    { name: "Bạc Liêu" },
    { name: "Bắc Ninh" },
    { name: "Bến Tre" },
    { name: "Bình Định" },
    { name: "Bình Dương" },
    { name: "Bình Phước" },
    { name: "Bình Thuận" },
    { name: "Cà Mau" },
    { name: "Cao Bằng" },
    { name: "Đắk Lắk" },
    { name: "Đắk Nông" },
    { name: "Điện Biên" },
    { name: "Đồng Nai" },
    { name: "Đồng Tháp" },
    { name: "Gia Lai" },
    { name: "Hà Giang" },
    { name: "Hà Nam" },
    { name: "Hà Tĩnh" },
    { name: "Hải Dương" },
    { name: "Hậu Giang" },
    { name: "Hòa Bình" },
    { name: "Hưng Yên" },
    { name: "Khánh Hòa" },
    { name: "Kiên Giang" },
    { name: "Kon Tum" },
    { name: "Lai Châu" },
    { name: "Lâm Đồng" },
    { name: "Lạng Sơn" },
    { name: "Lào Cai" },
    { name: "Long An" },
    { name: "Nam Định" },
    { name: "Nghệ An" },
    { name: "Ninh Bình" },
    { name: "Ninh Thuận" },
    { name: "Phú Thọ" },
    { name: "Phú Yên" },
    { name: "Quảng Bình" },
    { name: "Quảng Nam" },
    { name: "Quảng Ngãi" },
    { name: "Quảng Ninh" },
    { name: "Quảng Trị" },
    { name: "Sóc Trăng" },
    { name: "Sơn La" },
    { name: "Tây Ninh" },
    { name: "Thái Bình" },
    { name: "Thái Nguyên" },
    { name: "Thanh Hóa" },
    { name: "Thừa Thiên Huế" },
    { name: "Tiền Giang" },
    { name: "Trà Vinh" },
    { name: "Tuyên Quang" },
    { name: "Vĩnh Long" },
    { name: "Vĩnh Phúc" },
    { name: "Yên Bái" },
  ];

  fetchAsync("https://provinces.open-api.vn/api/").then((data) => {
    if (data) {
      let ulList = document.querySelectorAll(".city");
      ulList.forEach((ul) => {
        for (const province of provinces) {
          const li = document.createElement("li");
          const content = document.createTextNode(province?.name);
          li.setAttribute("value", province?.name);
          li.appendChild(content);
          ul.appendChild(li);
        }
        dropdpow = ul.closest(".px-dropdown");
      });
      initpXDropdown();
    }
  });

  oldRangeList = [
    { name: "1", value: "1" },
    { name: "2", value: "2" },
    { name: "3", value: "3" },
    { name: "4", value: "4" },
    { name: "5", value: "5" },
    { name: "6", value: "6" },
    { name: "7", value: "7" },
    { name: "8", value: "8" },
    { name: "9", value: "9" },
    { name: "10", value: "10" },
    { name: "11", value: "11" },
    { name: "12", value: "12" },
  ];
  let ulListOfMatch = document.querySelectorAll(".number-match");
  ulListOfMatch.forEach((ul) => {
    for (const old of oldRangeList) {
      const li = document.createElement("li");
      const content = document.createTextNode(old?.name);
      li.setAttribute("value", old?.name);
      li.appendChild(content);
      ul.appendChild(li);
    }
  });

  // get old /// Owr ddaau đáng lẽ phải chạy initpXDropdown(); sau khi render Li tuy nhiên
  // đnag trick k cần vì thằng old range k call api nên xong trước. thằng kia init 1 lần luôn
  oldRangeList = [
    { name: "Từ 15 đến 19 tuổi", value: "Từ 15 đến 19 tuổi" },
    { name: "Từ 20 đến 24 tuổi", value: "Từ 20 đến 24 tuổi" },
    { name: "Từ 25 đến 29 tuổi", value: "Từ 25 đến 29 tuổi" },
    { name: "Từ 30 đến 34 tuổi", value: "Từ 30 đến 34 tuổi" },
    { name: "Từ 35 đến 39 tuổi", value: "Từ 35 đến 39 tuổi" },
    { name: "Từ 40 đến 44 tuổi", value: "Từ 40 đến 44 tuổi" },
    { name: "Từ 45 đến 49 tuổi", value: "Từ 45 đến 49 tuổi" },
    { name: "Từ 50 đến 54 tuổi", value: "Từ 50 đến 54 tuổi" },
    { name: "Từ 55 đến 59 tuổi", value: "Từ 55 đến 59 tuổi" },
    { name: "Từ 60 đến 65 tuổi", value: "Từ 60 đến 65 tuổi" },
    { name: "Trên 65 tuổi", value: "Trên 65 tuổi" },
  ];
  let ulList = document.querySelectorAll(".old-range");
  ulList.forEach((ul) => {
    for (const old of oldRangeList) {
      const li = document.createElement("li");
      const content = document.createTextNode(old?.name);
      li.setAttribute("value", old?.name);
      li.appendChild(content);
      ul.appendChild(li);
    }
  });

  moneyFormat = () => {
    inputTypeMoney = document.querySelectorAll(".money");
    inputTypeMoney.forEach((input) => {
      input.addEventListener("input", ({ target: { value } }) => {
        // Xóa các ký tự không phải số
        if (value.startsWith("0")) {
          // Nếu có, xóa số 0 đầu tiên nhưng phải từ 2  chữ số trở lên chứ vẫn cho nhập 1 số không
          if (value.length > 1) {
            value = value.slice(1);
          }
        }
        let money = value.replace(/\D/g, "");
        // Định dạng lại hiển thị của số
        money = money.replace(/\B(?=(\d{3})+(?!\d))/g, ".");
        // Gán lại giá trị vào input
        input.value = money.toString();
      });
    });
  };

  moneyFormat();

  // ---------------check to checkbox to view more answer--------------------

  // get  all checkbox

  listMoreAnsCheckboxs = document.querySelectorAll(".more-ans-check-box");

  for (const checkbox of listMoreAnsCheckboxs) {
    moreAnsGroup = checkbox.closest(".more-ans-group");
    const input = moreAnsGroup.querySelector(".more-ans-input");
    checkbox.addEventListener("change", (event) => {
      //get form từ checkbox
      console.log(event.currentTarget.checked);
      if (event.currentTarget.checked) {
        if (canChecked(event.currentTarget)) {
          input.classList.remove("d-none");
          input.focus();
          input.select();
        }
      } else {
        input.value = "";
        input.classList.add("d-none");
        // input.classList.add("d-none");
        // counter.style.display = "none";
      }
    });
    input.onclick = function () {
      if (canChecked(checkbox)) {
        checkbox.checked = true;
      }
    };
    input.onblur = () => {
      if (input.value == "") {
        moreAsnCheckBox = input.closest(".more-ans-group");
        chec = moreAsnCheckBox.querySelector(".more-ans-check-box");
        chec.checked = false;
        input.classList.add("d-none");
        chec.disabled = true;

        // delay để trnahs chồng func
        setTimeout(() => {
          chec.disabled = false;
        }, 100);
      } else {
        // formGroup.querySelector(".p-holder").classList.add("d-none");
      }
    };
  }

  // ---------------check to radio to view more answer--------------------

  // get  all radio
  let listAllRadioOnpage = document.querySelectorAll("input[type='radio']");

  for (const radio of listAllRadioOnpage) {
    radio.addEventListener("change", (event) => {
      if (radio.getAttribute("radioType") == "more-ans") {
        console.log("more");
        //Xoa tat ca input more cua thang da chon
        formGroup = radio.closest(".form-group");
        allMoreAns = formGroup.querySelectorAll(".more-ans-input");
        allMoreAns?.forEach((ele) => {
          ele.value = "";
          ele.classList.add("d-none");
        });

        // focus vao thang input moi khi click
        moreAnsGroup = radio.closest(".more-ans-group");
        const input = moreAnsGroup?.querySelector(".more-ans-input");
        console.log(input);
        input.classList.remove("d-none");
        input.focus();
        input.select();
      } else {
        formGroup = radio.closest(".form-group");
        allMoreAns = formGroup.querySelectorAll(".more-ans-input");
        allMoreAns?.forEach((ele) => {
          ele.value = "";
        });
        formGroup.querySelector(".more-ans-input:not(.d-none)")?.classList.add("d-none");
        if (input) {
          input.value = "";
        }
      }
    });
    //Thêm sự kiện khi click vào textArea sẽ tự checkRadio
    moreAnsGroup = radio.closest(".more-ans-group");
    const input = moreAnsGroup?.querySelector(".more-ans-input");
    if (input) {
      input.onclick = function () {
        radio.checked = true;
      };
      input.onblur = () => {
        if (input.value == "") {
          moreAsnRadio = input.closest(".more-ans-group");
          ra = moreAsnRadio.querySelector(".more-ans-radio");

          // delay để trnahs chồng func
          setTimeout(() => {
            ra.checked = false;
            input.classList.add("d-none");
          }, 150);

          //Xoa luon mess cua thang so lan rut
          mess = formGroup.querySelector(".form-message");
          mess.innerHTML = "";
        }
      };
    }
  }

  // // ----------------xử lí count kí tự----------------
  // //get all textarea
  // listTextArea = document.querySelectorAll("textarea");

  // for (const textArea of listTextArea) {
  //   textArea.addEventListener("input", (event) => {
  //     paragrapLength = textArea.value.length;
  //     // get cha
  //     parent = textArea.closest(".form-group");
  //     // get và update thằng count
  //     counter = parent.querySelector(".counter");
  //     counter.firstChild.data = paragrapLength;
  //     if (paragrapLength == 1000) {
  //       counter.classList.add("counter-max");
  //     } else {
  //       counter.classList.remove("counter-max");
  //     }
  //   });
  // }
  // // Xử lí max and min select option
  // let listAllCheckBoxOnPage = document.querySelectorAll("input[type='checkbox']");
  // for (var i = 0; i < listAllCheckBoxOnPage.length; i++) {
  //   listAllCheckBoxOnPage[i].addEventListener("change", (event) => {
  //     //Check group của thằng này (thừa thiếu )
  //     if (event.target.checked) {
  //       if (!canChecked(event.target)) {
  //         event.target.checked = false;
  //       }
  //     }
  //   });
  // }
});

//Check group của thằng checkbox đủ select chưa (get cha nó rồi ra đếm con)
let canChecked = (inputEle) => {
  // get parent
  formGroup = inputEle.closest(".form-group");
  listCheckBox = formGroup.querySelectorAll("input[type='checkbox']");
  let count = 0;
  let max = formGroup.getAttribute("numberSelected");
  for (const input of listCheckBox) {
    if (input.checked) {
      count++;
    }
  }
  if (count <= max) {
    return true;
  } else {
    console.log("kodc");
    return false;
  }
};

sugestValueDropDown = (value, sugestValueDropDown) => {
  questionId = sugestValueDropDown.closest(".form-group").id;
  console.log(questionId);

  if (questionId == "q-26") {
    const Input = document.querySelectorAll(".input-city");
    Input.forEach((element) => {
      questionIdOfForm = element.closest(".form-group").id;
      if (questionIdOfForm == "q-28") {
        if (value !== "Không có nhu cầu mua/thuê nhà") {
          element.value = value;
        }
      }
    });
  } else if (questionId == "q-7") {
    const Input = document.querySelectorAll(".input-city");
    Input.forEach((element) => {
      element.value = value;
    });
  }

  // if (questionId == "q-26" || questionId == "q-28") {
  //   form = document.getElementById("q-7");
  //   console.log(form);
  //   const Input = form.querySelectorAll(".input-city");
  //   console.log(Input.value);
  //   Input.value = "";
  // }

  // neues sugest này đến từ thằng 2 và 3 thì sẽ k set cho thằng 1 vì thằng 1 k chung luồng thì k cần set. Nhưng thằng 1 set thì 2 3 sẽ đc set. Vậy nên check nêu là 2 3 thì để hàm chạy bt rồi set thằng 1 bằng rỗng
};

// js trên Selecte input trên mạng
// src https://codepen.io/mftaskin/pen/qBoGgdZ
const initpXDropdown = () => {
  const dropdownElements = document.querySelectorAll(".px-dropdown");
  window.addEventListener("click", () => {
    dropdownElements.forEach((item) => {
      item.classList.remove("active");
    });
  });
  dropdownElements.forEach((item) => {
    const dropdownValue = item.querySelector(".px-dropdown-value");
    const dropdownInput = item.querySelector(".px-dropdown-input");
    const dropdownPanelOptions = item.querySelectorAll(".px-dropdown-panel ul li");
    dropdownInput?.addEventListener("click", (event) => {
      event.stopPropagation();
      item.classList.toggle("active");
    });
    dropdownPanelOptions.forEach((dropdownPanelOptionItem) => {
      dropdownPanelOptionItem.addEventListener("click", (e) => {
        // sugestValueDropDown(dropdownPanelOptionItem.innerHTML, dropdownInput);
        // console.log("click");
        dropdownInput.querySelector("input").value = dropdownPanelOptionItem.innerHTML;
        dropdownValue.value = dropdownPanelOptionItem.getAttribute("data-value");
        // Đã click chọn thì xóa thông báo
        // tìm cha chung vs thằng mess là (px-dropdown)
        formGroup = e.target.closest(".form-group");

        if (formGroup.classList.contains("invalid")) {
          formGroup.closest(".card").classList.remove("invalid");
          formGroup.classList.remove("invalid");
          var messageElement = formGroup.querySelector(".form-message");
          if (messageElement) {
            messageElement.innerText = "";
          }
        }
      });
    });
  });
};

function Validator(formSelector) {
  // get parent
  var getParent = (currentElement, selector) => {
    // Nếu cha gần nhất ko phải element cần tìm thì tìm ra ngoài tiếp

    while (currentElement.parentElement) {
      if (currentElement.parentElement.matches(selector)) {
        return currentElement.parentElement;
      }
      currentElement = currentElement.parentElement;
    }
  };

  var formElement = document.querySelector(formSelector);

  // ------------------- Input và Select bình thường ----------------------
  // form rules la nhung rule se duoc xai trong form khi form khai bao
  var formRules = {};

  //Khai bao san cac function handle validation
  var validatiorRules = {
    required: function (value) {
      // return value ? undefined : "vui long nhap";
      return value == "" ? "Vui lòng nhập" : undefined;
    },
    email: (value) => {
      if (value == "" || value == undefined) {
        // chổ này code ngu là do k required thì nó k bắt nhập. không bắt nhập thì rỗng, rỗng lại bị rule email check fail
      } else {
        var regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
        return regex.test(value) ? undefined : "Email không hợp lệ";
      }
    },
    min: (min) => {
      return function (value) {
        return value.length >= min ? undefined : `min is ${min}`;
      };
    },
    phone: (value) => {
      var regex = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im;
      return regex.test(value) ? undefined : "Số điện thoại không đúng";
    },
    bib: (value) => {
      var regex = /^[0-9]{5,7}$/;
      return regex.test(value) ? undefined : "Bib không hợp lệ";
    },
    numberOfMatch: (value) => {
      console.log(Number(value));
      return Number(value) < 14 ? undefined : "Số lần tham gia không hợp lệ";
    },
    dob: (value) => {
      console.log(Number(value));
      return Number(value) > 1900 && Number(value) < 2023 ? undefined : "Năm sinh không đúng";
    },
  };
  if (formElement) {
    // get all input
    var inputs = formElement.querySelectorAll("[name][rules]");

    // create rules
    // not pass => return message
    // pass => undefined

    // get rules to object
    for (var input of inputs) {
      var rules = input.getAttribute("rules").split("|");
      var ruleInfo;
      for (var rule of rules) {
        var isRulehasValue = rule.includes(":");
        if (isRulehasValue) {
          ruleInfo = rule.split(":");
          rule = ruleInfo[0];
        }
        var ruleFunction = validatiorRules[rule];
        if (isRulehasValue) {
          ruleFunction = validatiorRules[rule](ruleInfo[1]);
        }
        // console.log(rule);
        if (Array.isArray(formRules[input.name])) {
          formRules[input.name].push(ruleFunction);
        } else {
          formRules[input.name] = [ruleFunction];
        }
      }

      // lang nghe su kien de validate (blur,change)
      input.onblur = (event) => {
        var formGroup = getParent(event.target, ".form-group");

        if (event.target.value == "") {
          formGroup.querySelector(".p-holder").classList.remove("d-none");
        } else {
          formGroup.querySelector(".p-holder").classList.add("d-none");
        }
        setTimeout(() => {
          handleValidate(event);
        }, 200);
      };
      // Khi đã báo lỗi và bấm dô nhập thì xóa đi nào blur mới check lại
      input.oninput = handleClearError;
    }
  }

  // new validation for a stupid dog

  checkFormGroupIsHasData = (event) => {
    isHasData = false;
    formGroup = event.target.closest(".form-group");
    inputList = formGroup.querySelectorAll("input");
    inputList.forEach((input) => {
      if (input.value !== "") {
        isHasData = true;
      }
    });
    return isHasData;
  };

  listCurrentError = [];
  // lưu id của form để kéo tới nơi

  // ---------------------ham thuc hien validate--------------------
  function handleValidate(event) {
    // console.log("blur");

    var rules = formRules[event.target.name];
    console.log(event.target.name);
    console.log(rules);
    var errorMessage = "";

    if (event.target.name !== "test") {
      for (var rule of rules) {
        if (rule) {
          errorMessage = rule(event.target.value);
        }
        if (errorMessage) break;
      }
      // neu co loi thi hien thi ra
      if (errorMessage) {
        // laays thang cha
        var formGroup = getParent(event.target, ".form-group");
        console.log(errorMessage);
        listCurrentError.push(formGroup.id);
        // tim thang connn
        if (formGroup) {
          // add class invalid zo cai formGroup  de xu li gi ẩn hiện thằng span lỗi
          formGroup.classList.add("invalid");
          formGroup.closest(".card").classList.add("invalid");
          var messageElement = formGroup.querySelector(".form-message");
          if (messageElement) {
            messageElement.innerText = errorMessage;
          }
          // Tô đỏ khung card
          // formGroup.closest(".card").classList.add("invalid");
        }
      }
    } else {
      if (!checkFormGroupIsHasData(event)) {
        for (var rule of rules) {
          if (rule) {
            errorMessage = rule(event.target.value);
          }
          if (errorMessage) break;
        }
        // neu co loi thi hien thi ra
        if (errorMessage) {
          // laays thang cha
          var formGroup = getParent(event.target, ".form-group");
          console.log(errorMessage);
          listCurrentError.push(formGroup.id);
          // tim thang connn
          if (formGroup) {
            // add class invalid zo cai formGroup  de xu li gi ẩn hiện thằng span lỗi
            formGroup.classList.add("invalid");
            formGroup.closest(".card").classList.add("invalid");
            var messageElement = formGroup.querySelector(".form-message");
            if (messageElement) {
              messageElement.innerText = errorMessage;
            }
            // Tô đỏ khung card
            // formGroup.closest(".card").classList.add("invalid");
          }
        }
      }
    }

    return !errorMessage;
  }

  function handleClearError(event) {
    var formGroup = getParent(event.target, ".form-group");
    if (formGroup.classList.contains("invalid")) {
      formGroup.classList.remove("invalid");
      formGroup.closest(".card").classList.remove("invalid");
      var messageElement = formGroup.querySelector(".form-message");
      if (messageElement) {
        messageElement.innerText = "";
      }
    }
    formGroup.querySelector(".p-holder").classList.add("d-none");
  }

  // ----------------- Radio group -------------------------

  // hàm check required

  const checkAllGroupRadio = (sectionId = "") => {
    currentSection = document.getElementById(sectionId);

    radioGroupOfCurrentSection = currentSection.querySelectorAll("[name][groupRadioRules]");
    let isCheckedAll = true;

    for (const group of radioGroupOfCurrentSection) {
      if (!checkRequired(group)) {
        isCheckedAll = false;
        listCurrentError.push(group.id);
      }
    }
    return isCheckedAll;
  };

  const checkRequired = (group) => {
    let value = group.querySelector(`input[name="${group.getAttribute("name")}"]:checked`)?.value;

    if (value) {
      // Da click

      return true;
    } else {
      // thong bao chua click
      group.classList.add("invalid");
      var messageElement = group.querySelector(".form-message");
      if (messageElement) {
        messageElement.innerText = "Đây là một câu hỏi bắt buộc";
      }
      //Bôi đỏ khung card
      group.closest(".card").classList.add("invalid");
      return false;
    }
  };

  // get all radio group
  radioGroup = formElement.querySelectorAll("[name][groupRadioRules]");
  // xóa message khi đã check radio
  for (const group of radioGroup) {
    // get hết các nút trong group
    listInputRadio = group.querySelectorAll("input");
    //thêm sự kiện khi click cho từng input radio
    for (const input of listInputRadio) {
      input.onclick = function () {
        // xử lí xóa message
        if (group.classList.contains("invalid")) {
          group.classList.remove("invalid");
          var messageElement = group.querySelector(".form-message");
          if (messageElement) {
            messageElement.innerText = "";
          }
          //xóa đỏ khung card
          group.closest(".card").classList.remove("invalid");
        }
      };
    }
  }

  // ----------------- checkbox group -------------------------

  // hàm check required

  const checkAllGroupCheckbox = (sectionId = "") => {
    currentSection = document.getElementById(sectionId);
    checkBoxGroupOfCurrentSection = currentSection.querySelectorAll("[name][groupCheckboxRules]");
    let isCheckedAll = true;
    for (const group of checkBoxGroupOfCurrentSection) {
      if (!checkRequiredCheckBox(group)) {
        listCurrentError.push(group.id);
        isCheckedAll = false;
      }
    }
    return isCheckedAll;
  };

  const checkRequiredCheckBox = (group) => {
    // list mayas cái đã được check
    let listChecked = group.querySelectorAll(`input[name="${group.getAttribute("name")}"]:checked`);

    if (listChecked.length > 0) {
      // Da click
      return true;
    } else {
      // Chua click, ban thong bao ra (check box)
      group.classList.add("invalid");
      group.closest(".card").classList.add("invalid");
      var messageElement = group.querySelector(".form-message");
      if (messageElement) {
        messageElement.innerText = "Vui lòng chọn";
      }

      return false;
    }
  };

  // get all checkbox group
  let checkboxGroup = formElement.querySelectorAll("[name][groupCheckboxRules]");
  // xóa message khi đã check radio
  for (const group of checkboxGroup) {
    // get hết các nút trong group
    listInputRadio = group.querySelectorAll("input");
    //thêm sự kiện khi click cho từng input radio
    for (const input of listInputRadio) {
      input.onclick = function () {
        // xử lí xóa message
        if (group.classList.contains("invalid")) {
          group.classList.remove("invalid");
          var messageElement = group.querySelector(".form-message");
          if (messageElement) {
            messageElement.innerText = "";
          }
          group.closest(".card").classList.remove("invalid");
        }
      };
    }
  }

  //----------------------------------------------------------

  // Xử lí max length

  // xử lí hành vi submit form
  // formElement.onsubmit = function (event) {
  //   event.preventDefault();

  //   let isValid = true;

  // input bt + select
  // var inputs = formElement.querySelectorAll("[name][rules]");

  // for (var input of inputs) {
  //   if (!handleValidate({ target: input })) {
  //     // console.log("co thang false");
  //     isValid = false;
  //   }
  // }

  // group radio

  // if (!checkAllGroupRadio()) {
  //   isValid = false;
  // }

  // group checkbox

  // if (!checkAllGroupCheckbox()) {
  //   isValid = false;
  // }

  //   if (isValid) {
  //     console.log("trueeeeeeeeeeeeeeeeeeeeeeee");
  //     sendPostRequest();
  //   } else {
  //     // scrollToInvalidFormGroup();
  //   }
  // };

  // xử lí submit

  scrollToInvalidFormGroup = () => {
    // sort lai truoc
    sorted = listCurrentError.sort((a, b) => {
      const numA = parseInt(a.slice(2)); // lấy số từ chuỗi 'q-x'
      const numB = parseInt(b.slice(2)); // lấy số từ chuỗi 'q-x'
      return numA - numB; // so sánh các số và trả về kết quả
    });
    console.log(sorted);
    setTimeout(() => {
      if (sorted.length > 0) {
        card = document.getElementById(sorted[0]).closest(".card");

        itemHasScroll = card.scrollIntoView({
          behavior: "smooth",
        });
      }
    }, 500);
  };

  finalValidation = (sectionId) => {
    // vì sẽ validation mỗi section riêng nên giờ phải truyền sectionId
    let isValid = true;

    currentSection = document.getElementById(sectionId);

    // if (!checkAllOfMoreAnsInputOfRadio(sectionId)) {
    //   isValid = false;
    // }

    // input bt + select
    var inputs = currentSection.querySelectorAll("[name][rules]");

    for (var input of inputs) {
      if (!handleValidate({ target: input })) {
        // console.log("co thang false");
        isValid = false;
      }
    }

    // group radio

    if (!checkAllGroupRadio(sectionId)) {
      isValid = false;
    }

    // group checkbox

    if (!checkAllGroupCheckbox(sectionId)) {
      isValid = false;
    }

    if (isValid) {
      return true;
    } else {
      scrollToInvalidFormGroup();
      listCurrentError = [];
      return false;
    }

    // check radio morans
  };
}

function detectDeviceType() {
  if (window.matchMedia("(max-width: 576px)").matches) {
    return "mobile";
  } else if (window.matchMedia("(min-width: 577px) and (max-width: 820px)").matches) {
    return "tablet";
  } else {
    return "pc";
  }
}

const sendPostRequest = async () => {
  var bodyFormData = new FormData();
  var data2 = {};
  //---------------------get data radio--------------
  // + get all radio group
  let radioGroups = document.querySelectorAll("[name][groupRadioRules]");
  for (const radioGroup of radioGroups) {
    let value = "";
    pNode = radioGroup.querySelector(".question");
    radioChecked = radioGroup.querySelector(`input[name="${radioGroup.getAttribute("name")}"]:checked`);
    if (radioChecked.getAttribute("radioType") != "more-ans") {
      value = radioChecked.value;
    } else {
      console.log("more");
      moreAnsGroup = radioChecked.closest(".more-ans-group");
      titleAnswer = moreAnsGroup.querySelector("label").textContent;
      let input_more_ans = moreAnsGroup.querySelector(".more-ans-input");
      value = `${titleAnswer}: ${input_more_ans.value}`;
    }
    key = `${pNode.innerText.trim().replace(/\*/g, "")}`;
    console.log(key);
    if (!data2[key]) {
      data2[key] = value ? value : "";
    }
  }
  //-----------get checkbox---------------------
  //  + get all checkbox group
  let checkboxGroups = document.querySelectorAll("[name][groupCheckboxRules]");

  for (const checkboxGroup of checkboxGroups) {
    let value = "";
    pNode = checkboxGroup.querySelector(".question");

    //get data cua checkbox
    listChecked = checkboxGroup.querySelectorAll(`input[name="${checkboxGroup.getAttribute("name")}"]:checked`);
    for (const checked of listChecked) {
      console.log(checked);
      if (checked.getAttribute("checkBoxType") != "more-ans") {
        value += `-${checked.value}\n`;
      } else {
        //get data input more-ans
        let moreAnsGroup = checked.closest(".more-ans-group");

        if (moreAnsGroup.classList.contains("more-ans-group-newType")) {
          titleAnswer = moreAnsGroup.querySelector("p");
          textArea = moreAnsGroup.querySelector("textarea");
          value += `-${titleAnswer.textContent}: ${textArea.value}\n`;
        } else {
          textArea = moreAnsGroup.querySelector("textarea");
          value += `-${textArea.value}\n`;
        }
      }
    }
    data2[`${pNode.textContent.trim().replace(/\*/g, "")}`] = value ? value : "";
    // bodyFormData.append(`data[${pNode?.innerText.trim()}]`, value);
  }
  //--------------------get input and select---------------------
  // get all input
  var inputs = document.querySelectorAll("[name][rules]");
  console.log(inputs);
  for (const input of inputs) {
    //  check phải stupid multi input ko
    if (input.name !== "test") {
      // Đầu tiên tìm form-group trước thì mới tìm được <p></p> vì là cha chung
      let form_group = input.closest(".form-group");
      let pNode = form_group.querySelector(".question");

      pNode.style.visibility = "visible";

      let value = input.value;
      data2[`${pNode.innerText.trim().replace(/\*/g, "")}`] = value ? value : "";

      pNode.style.visibility = "hidden";
    } else {
      let form_group = input.closest(".form-group");

      let pNode = form_group.querySelector(".question");

      let value = input.value;
      console.log(input.placeholder);
      if (value != "") {
        // data2[`${pNode.innerText.trim().replace(/\*/g, "")}`] = value ? `${input.placeholder}:${value}` : "";
        data2[`${input.placeholder}`] = value ? value : "";
        console.log(input.value);
      }
    }
  }

  //--------------------Text area---------------------
  // get all text area
  var inputs = document.querySelectorAll(".text-area textarea");
  for (const input of inputs) {
    // Đầu tiên tìm form-group trước thì mới tìm được <p></p> vì là cha chung
    let form_group = input.closest(".form-group");
    let pNode = form_group.querySelector(".question");
    // console.log(pNode.innerText);
    let value = input.value;
    bodyFormData.append(`data[${pNode.innerText}]`, value);
    data2[`${pNode.textContent.trim().replace(/\*/g, "")}`] = value ? value : "";
  }

  //  Add type of divice

  // add coookie

  data2["orig_aid"] = get_cookie_name("orig_aid");
  data2["fosp_aid"] = get_cookie_name("fosp_aid");
  data2["fosp_uid"] = get_cookie_name("fosp_uid");

  // Get data tracking form banner

  email = document.querySelector('input[name="email"]')?.value;
  name = document.querySelector('input[name="name"]')?.value;
  phone = document.querySelector('input[name="name"]')?.phone;
  age = document.querySelector('input[name="dob"]')?.phone;
  age_range = document.querySelector('input[name="age-range"]')?.value;

  dataCheckingFormBanner = {
    campaign_name: "register_23-vi_sao_tre_mac_benh_tieu_chay", //name của ca
    engagement_type: "1002",
    source_name: "Vnexpress", // Hệ thống tự push vào
    source_type: "internal",
    index_brand: "VeSinhHocDuong",
    index_industrial: "",
    index_category: "",
    index_topic: "",

    //Nhập thông tin của audience
    name: name ? name : "", // nhập tên audience (option)
    phone: phone ? phone : "",
    gender: "",
    age: age ? age : "",
    birth_day: "",
    age_range: age_range ? age_range : "", // (Optional): 18-24/ 25-34/ 35-44/ 45-54/ 55-64/ 65+. VD: 25-34
    email: email ? email : "",
  };

  // console.log(dataCheckingFormBanner);

  //get device

  // console.log(detectDeviceType());

  data2["device"] = detectDeviceType();
  data2["score"] = scoreSubmit;

  console.log(data2);

  api = "https://script.google.com/macros/s/AKfycbyf5oax09z5-fuZNbbXDgPDqosQLChhDZxl_qH1OQtcqf-odGIUGqwta00EZf5MTjuH/exec";

  postData(api, data2, dataCheckingFormBanner);

  icon_load = document.querySelector("#icon-loading");
  icon_load.classList.add("isLoad");
};

// api post data

async function postData(url, data, dataCheckingFormBanner) {
  icon_load = document.querySelector("#icon-loading");
  icon_load.classList.add("isLoad");
  btn_submit = document.querySelector(".btn-submit");
  btn_submit.disabled = true;
  axios({
    method: "POST",
    url,
    data: data,
    headers: {
      "Content-Type": "multipart/form-data;",
    },
  })
    .then(function (response) {
      //handle success
      if (response.status === 201 || response.status === 200) {
        // Swal.fire({
        //   icon: "success",
        //   title: "Gửi khảo sát thành công!",
        //   html: "<div class='pop-area'><p>Cảm ơn bạn đã tham gia</p></div>",
        //   focusConfirm: false,
        //   confirmButtonText: "Quay lại VnExpress Marathon",
        //   confirmButtonAriaLabel: "Thumbs up, great!",
        // }).then((result) => {
        //   if (result.isConfirmed) {
        //     location.reload();

        //     window.location.href = "https://vm.vnexpress.net/quy-nhon-2023";
        //   } else {
        //     location.reload();
        //     console.log("close");
        //   }
        // });

        // tracking

        window.dataLayer = window.dataLayer || [];
        dataLayer.push({
          event: "voteEvent",
          vote_category: "survey_VMNT2023",
          vote_action: "survey_VMNT2023",
        });

        var logForm = window._logForm || (window._logForm = []);
        logForm.push(dataCheckingFormBanner);

        document.querySelector(".card-info").classList.add("d-none");
      } else {
        // not ok
        Swal.fire({
          icon: "error",
          title: "Đã sảy ra lỗi gì đó...",
          text: "Vui lòng thử lại sau!",
        });
      }

      icon_load.classList.remove("isLoad");
      currentUrl = window.location.href;
      shareSocial(currentUrl);

      // setTimeout(() => {
      //   window.location.href = "https://vnexpress.net/";
      // }, 7000);

      setTimeout(() => {
        btn_submit.disabled = false;
      }, 3000);
    })
    .catch(function (response) {
      //handle error
      console.log(response);
    });
}

function get_cookie_name(name) {
  var match = document.cookie.match(new RegExp("(^| )" + name + "=([^;]+)"));
  if (match) {
    return match[2];
  } else {
    console.log("--something went wrong---");
  }
}

// Xử lí chuyển trang --------------------------------------------------------------

// array config navigation of question
navigation = {
  section_1: {
    core_nav: {
      next: "final",
    },
  },
};

logNavi = ["section_1"];
lastSection = "section_1";
firstSection = "section_1";

const changePage = (type, targetSectionId, currentSectionId) => {
  // console.log(document.getElementById(targetSection).getAttribute("isGet"));
  if (type === "next") {
    // ẩn hiện
    targetSection = document.getElementById(targetSectionId);

    targetSection.classList.remove("d-none");
    currentSection = document.getElementById(currentSectionId);

    currentSection.classList.add("d-none");
    // đánh dấu isGet để lấy data
    targetSection.setAttribute("isGet", true);
    // ẩn hiện button nav
    controlButtonNav("next", targetSectionId);
  } else {
    //back
    // ẩn hiện
    targetSection = document.getElementById(targetSectionId);
    console.log(targetSection);
    targetSection.classList.remove("d-none");
    currentSection = document.getElementById(currentSectionId);
    currentSection.classList.add("d-none");
    // đánh dấu isGet để lấy data
    currentSection.setAttribute("isGet", false);
    //Xóa data khi back
    ClearDataOfSection(currentSectionId);
    // ẩn hiện button nav
    controlButtonNav("back", targetSectionId);

    //Check ẩn hiện cái giới thiệu
  }
  //scroll to top
  window.scrollTo({
    top: 0,
    behavior: "smooth",
  });
};

var controlButtonNav = (type, targetSectionId) => {
  btnSubmit = document.querySelector(".btn-submit");
  btnPre = document.querySelector(".btn-nav-back");
  btnNext = document.querySelector(".btn-nav-next");

  if (targetSectionId == firstSection) {
    btnPre.classList.add("d-none");
    btnNext.classList.remove("d-none");
    btnSubmit.classList.add("d-none");
  } else if (targetSectionId == lastSection) {
    btnPre.classList.remove("d-none");
    btnNext.classList.add("d-none");
    btnSubmit.classList.remove("d-none");
  } else {
    btnPre.classList.remove("d-none");
    btnNext.classList.remove("d-none");
    btnSubmit.classList.add("d-none");
  }
  // btnSubmit.classList.remove("d-none");
};

var ClearDataOfSection = (sectionId) => {
  targetSection = document.getElementById(sectionId);
  // sẽ có các loại input
  //---------------------get data radio--------------
  let checkBoxs = targetSection.querySelectorAll("input[type='checkbox']");
  checkBoxs.forEach((checkBoxInput) => {
    checkBoxInput.checked = false;
  });
  //---------------------get data checkbox--------------
  let checkRadios = targetSection.querySelectorAll("input[type='radio']");
  checkRadios.forEach((radioInput) => {
    radioInput.checked = false;
  });
  //---------------------get data all input--------------
  var inputs = targetSection.querySelectorAll("[name][rules]");
  for (const input of inputs) {
    input.value = "";
  }
  //--------------------Text area---------------------
  var textAreas = targetSection.querySelectorAll(".text-area textarea");
  for (const textArea of textAreas) {
    textArea.value = "";
  }
  //--- so lan rut
  document.querySelector(".input-soLanRut").value = "";
};

let findTargetSectionIdNext = () => {
  // this func using to fint next section
  // get current section
  let currentSectionId = "";
  currentSectionId = logNavi[logNavi.length - 1];
  currentSection = document.getElementById(currentSectionId);
  // get formgroup has question navigation
  formGroup = currentSection.querySelector(".question_nav");
  let selected = formGroup?.querySelector(`input[name="${formGroup.getAttribute("name")}"]:checked`)?.id;

  let targetSection;
  type_nav = navigation[currentSectionId];
  // nếu selected k có nghĩa là section đó không có question-nav
  // nên sẽ có core_nav
  if (selected) {
    targetSection = type_nav.question_nav[selected];
  } else {
    if (type_nav?.core_nav?.next != "final") {
      targetSection = type_nav?.core_nav?.next;
    } else {
      // Đã là cuối rồi
      targetSection = "final";
    }
  }

  return targetSection;
};

let findTargetSectionIdPre = () => {
  // this func using to find pre section
  let preSectionId = "";
  if (logNavi.length >= 2) {
    preSectionId = logNavi[logNavi.length - 2];
  } else {
    preSectionId = logNavi[logNavi.length - 1];
  }
  return preSectionId;
};

nextSection = () => {
  //bấm next thì set thằng list lỗi về rỗng để thêm lại từ đầu
  listCurrentError = [];
  targetSectionId = findTargetSectionIdNext();
  currentSectionId = logNavi[logNavi.length - 1];
  // check Validate truoc
  if (!finalValidation(currentSectionId)) {
    // hiện thông báo invalid
    // alert("chưa điền xong kìa");
  } else {
    // nếu next mà k có thì nghĩa đang là cuối targetSectionId = ""
    if (targetSectionId != "final") {
      changePage("next", targetSectionId, currentSectionId);
      // add log after change section
      logNavi.push(targetSectionId);
    }
  }
};

prevSection = () => {
  //Delete Data of current section
  targetSectionId = findTargetSectionIdPre();
  // console.log(targetSection);
  currentSectionId = logNavi[logNavi.length - 1];
  changePage("pre", targetSectionId, currentSectionId);
  // remove log after change section
  logNavi.pop();
};

document.querySelector("#btn-nav-next").onclick = () => {
  nextSection();
};

document.querySelector("#btn-nav-back").onclick = () => {
  prevSection();
};

document.querySelector(".btn-reStart").onclick = (e) => {
  e.preventDefault();
  location.reload();
};

document.querySelector(".btn-back").onclick = (e) => {
  e.preventDefault();
  url = "https://vnexpress.net/thoi-su/ve-sinh-hoc-duong";
  window.open(url, "_blank");
};

result = {
  "q-2": "D",
  "q-3": "A",
  "q-4": "A",
  "q-5": "B",
  "q-6": "D",
};

checkScore = () => {
  score = 0;
  listQuiz = document.querySelectorAll(".quiz-test");
  console.log(listQuiz);
  listQuiz.forEach((element) => {
    quizId = element.id;
    inputChecked = element.querySelector('input[type="radio"]:checked');
    value = inputChecked.value[0];
    ansGroup = inputChecked.closest(".ans-group");

    // đổi màu all ansgroup và show icon
    allAns = element.querySelectorAll(".ans-group");
    allAns.forEach((ele) => {
      ele.classList.add("show-ans");
    });

    //show butotn ack

    document.querySelector(".btn-back").classList.remove("d-none");

    //show explain
    exQuues = element.querySelector(".ex-ques");
    exQuues?.classList.remove("d-none");

    //show đúng xanh đề
    ansGroupCorrect = element.querySelector(".ans-group.ans-t");
    ansGroupCorrect?.classList?.add("correct");

    //check

    ansGroup.classList.add("show-ans");
    if (result[quizId] == value) {
      ansGroup.classList.add("correct");
      score++;
      //add icon
      var icon = document.createElement("i");
      icon.classList.add("far", "fa-check");
      ansGroup.appendChild(icon);
    } else {
      ansGroup.classList.add("fail");

      //add icon
      var icon = document.createElement("i");
      icon.classList.add("far", "fa-times");
      ansGroup.appendChild(icon);
    }
  });

  //show card resulkt

  cardResult = document.querySelector(".card-result");

  cardResult?.classList.remove("d-none");

  //hidden card co cau

  cardSub = document.querySelector(".card-sub");

  cardSub?.classList.add("d-none");

  return score;
};

scoreSubmit = 0;

btnSubmit = document.querySelector(".btn-submit");
btnSubmit.onclick = (e) => {
  e.preventDefault();
  currentSectionId = logNavi[logNavi.length - 1];
  if (!finalValidation(currentSectionId)) {
    // hiện thông báo invalid
  } else {
    //Check đáp án
    score = checkScore();

    scoreSubmit = score;
    scoreEle = document.querySelector(".score");
    scoreEle.innerHTML = `${score}/5`;

    scoreContainer = scoreEle.closest(".score-container");
    if (score < 5) {
      scoreContainer.querySelector(".score-good").classList.add("d-none");
      document.querySelector(".alert-good").classList.add("d-none");
    } else {
      scoreContainer.querySelector(".score-bad").classList.add("d-none");
      document.querySelector(".alert-bad").classList.add("d-none");
      scoreEle.style.color = "#0F8727";
    }
    //scroll to result
    elementToScrollTo = document.querySelector(".card-result");
    elementToScrollTo.scrollIntoView({ behavior: "smooth" });

    sendPostRequest();
  }
};

shareSocial = (currentUrl) => {
  // share social

  // Tạo liên kết chia sẻ đến Facebook

  var fbShareUrl = "https://www.facebook.com/sharer/sharer.php?u=" + currentUrl;
  const twitterUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(currentUrl)}`;
  // Gán sự kiện click cho nút button
  twiters = document.querySelectorAll(".twiter");

  twiters.forEach((element) => {
    element.addEventListener("click", function () {
      // Mở trang chia sẻ của Facebook trong cửa sổ mới
      window.open(twitterUrl, "_blank");
    });
  });

  fbs = document.querySelectorAll(".fb");

  fbs.forEach((element) => {
    element.addEventListener("click", function () {
      // Mở trang chia sẻ của Facebook trong cửa sổ mới
      window.open(fbShareUrl, "_blank");
    });
  });
  limks = document.querySelectorAll(".link");
  limks.forEach((element) => {
    element.addEventListener("click", function (event) {
      event.preventDefault();
      console.log("copyy link");
      // Mở trang chia sẻ của Facebook trong cửa sổ mới
      const textarea = document.createElement("textarea");
      textarea.value = currentUrl;
      document.body.appendChild(textarea);
      textarea.select();
      document.execCommand("copy");
      document.body.removeChild(textarea);
      alert("Đã sao chép đường dẫn");
    });
  });
};

//radio-group-rating

listRatingContainer = document.querySelectorAll(".input-container");
listRatingContainer.forEach((element) => {
  element.addEventListener("click", (e) => {
    // console.log(element);
    element.querySelector("input").checked = true;
  });
});

searchBib = () => {
  console.log("search");
  search = document.querySelector("#q-1 input").value;
  console.log(search);
  value = dataBib.find((ele) => ele.bib == search);
  return value;
};

document.querySelector(".btn-do-survey").addEventListener("click", (e) => {
  e.preventDefault();
  document.querySelector("#q-2").scrollIntoView({
    behavior: "smooth",
  });
});

// window.addEventListener("scroll", () => {
//   // Hiển thị scroll indicator khi người dùng cuộn

//   console.log("hahaha");
//   topBar = document.querySelector("#topbar");
//   myContainer = document.querySelector(".my-container");

//   if (topBar.classList.contains("nav-down")) {
//     myContainer.add("my-down");
//   } else {
//     myContainer.remove("my-down");
//   }
//   // Thực hiện các hành động kiểm tra khác tại đây
// });
